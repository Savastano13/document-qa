import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import pdfplumber
import requests
from datetime import datetime
from openai import OpenAI
import time
import re
import numpy as np

# ================= CONFIGURATION DE LA CL√â API =================
# ATTENTION : Votre cl√© API est ici en clair, ce qui peut √™tre risqu√© en production.
# Il est recommand√© d'utiliser des variables d'environnement ou un gestionnaire de secrets.
OPENAI_API_KEY = "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"

# ================= CONFIGURATION TELEGRAM =================
TELEGRAM_BOT_TOKEN = "7960645078:AAEzbayN_Kj1BV1rMRCg1LebvzDjPwFazYU"
TELEGRAM_CHAT_ID = "6672006206"

def send_telegram_message(message):
    """
    Envoie un message via Telegram pour notifier l'utilisateur des √©v√©nements importants.
    """
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    try:
        requests.post(url, data=payload)
    except Exception as e:
        st.error(f"Erreur lors de l'envoi du message Telegram : {e}")

# ================= CONFIGURATION STREAMLIT =================
# Configuration g√©n√©rale de la page
st.set_page_config(page_title="IA Finance + Bot Trading BTC", layout="wide")

# Titre de la sidebar avec des instructions
st.sidebar.title("üîê Configuration & Authentification")
st.sidebar.info("La cl√© API OpenAI est int√©gr√©e directement dans le code.")

# Utilisation directe de la cl√© API int√©gr√©e
openai_api_key = OPENAI_API_KEY

# Mode test : si la cl√© API n'est pas renseign√©e (ici, toujours False)
mode_test = not openai_api_key
if not mode_test:
    # Configuration du client OpenAI avec la cl√© int√©gr√©e
    client_openai = OpenAI(api_key=openai_api_key)
else:
    client_openai = None

# ================= D√âFINITION DES ONGLETS PRINCIPAUX =================
tab1, tab2, tab3 = st.tabs(["üí¨ Conseiller Financier IA", "üìà Bot de Trading BTC/USDT", "üìä Analyse de Portefeuille"])

# ================= FONCTION UTILE : Extraction des Transactions =================
def extract_transactions(text):
    """
    Extraction approximative des transactions depuis un relev√© bancaire.
    Recherche des lignes contenant une date (format dd/mm/yyyy ou dd/mm/yy) et un montant.
    Retourne un DataFrame avec la date et le montant de chaque transaction d√©tect√©e.
    """
    pattern = r"(\d{1,2}/\d{1,2}/\d{2,4}).*?([-+]?\d+[.,]?\d*)"
    matches = re.findall(pattern, text)
    transactions = []
    for m in matches:
        date_str = m[0]
        amount = m[1].replace(',', '.')
        try:
            # Essai sur format 4 chiffres puis sur 2 chiffres
            try:
                date_obj = datetime.strptime(date_str, "%d/%m/%Y")
            except ValueError:
                date_obj = datetime.strptime(date_str, "%d/%m/%y")
        except Exception:
            date_obj = None
        transactions.append({"Date": date_obj, "Montant": float(amount)})
    df = pd.DataFrame(transactions)
    return df if not df.empty else None

# ================= TAB 1 : Conseiller Financier IA =================
# ================= TAB 1 : Conseiller Financier IA =================
# ================= TAB 1 : Conseiller Financier IA =================
with tab1:
    st.title("üí¨ Votre Conseiller Financier IA")
    st.markdown(
        """
        **Bienvenue dans le module de Conseil Financier IA !**

        - T√©l√©versez votre relev√© bancaire (format TXT ou PDF).
        - Posez votre question sur vos d√©penses (ex. : *O√π est-ce que je d√©pense trop ?*).
        - Extraire automatiquement les transactions (optionnel).
        - Lancez l'analyse pour obtenir des conseils personnalis√©s.
        - Consultez et t√©l√©chargez l'historique de vos √©changes.
        """
    )

    # T√©l√©versement du fichier et saisie de la question
    uploaded_file = st.file_uploader("üìé T√©l√©versez votre relev√© bancaire", type=["txt", "pdf"])
    question = st.text_area("Posez votre question :", placeholder="Ex : O√π est-ce que je d√©pense trop ?")

    # Initialisation de l'historique des √©changes dans la session
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []

    if uploaded_file and question:
        try:
            # Lecture du fichier en fonction de son type
            if uploaded_file.name.endswith(".txt"):
                document = uploaded_file.read().decode("utf-8")
            elif uploaded_file.name.endswith(".pdf"):
                with pdfplumber.open(uploaded_file) as pdf:
                    document = "\n".join([page.extract_text() or "" for page in pdf.pages])
            else:
                st.error("‚ùå Format non support√©.")
                st.stop()

            st.markdown("#### üîé Extraction facultative des transactions")
            if st.button("Extraire les transactions du relev√©"):
                transactions_df = extract_transactions(document)
                if transactions_df is not None:
                    st.markdown("**Transactions d√©tect√©es :**")
                    st.dataframe(transactions_df)
                else:
                    st.info("Aucune transaction n'a pu √™tre d√©tect√©e automatiquement.")

            st.markdown("#### üì¢ Lancement de l'analyse du relev√© bancaire")
            if st.button("Lancer l'analyse du relev√©"):
                if mode_test:
                    # R√©ponse simul√©e pour le mode test
                    fake_response = (
                        "R√©ponse simul√©e : Votre relev√© montre des d√©penses excessives en abonnements et frais de livraison. "
                        "Il serait judicieux de revoir ces postes pour optimiser votre budget mensuel."
                    )
                    st.success(fake_response)
                    st.session_state.chat_history.append({
                        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        "user": question,
                        "bot": fake_response
                    })
                    send_telegram_message(f"[TEST IA] {fake_response}")
                else:
                    # Construction du prompt pour l'IA avec instructions d√©taill√©es
                    system_prompt = (
                        "Tu es un conseiller financier expert. Analyse le relev√© bancaire fourni et donne des conseils concrets pour "
                        "optimiser les d√©penses et √©conomiser de l'argent. Fournis des recommandations pratiques et d√©taill√©es."
                    )
                    messages = [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": f"Relev√© bancaire :\n{document}\n\nQuestion : {question}"}
                    ]
                    with st.spinner("üí¨ L'IA analyse votre relev√©..."):
                        response = client_openai.chat.completions.create(
                            model="gpt-4",
                            messages=messages,
                            stream=True,
                        )
                        full_response = ""
                        placeholder = st.empty()
                        for part in response:
                            if 'choices' in part and len(part['choices']) > 0:
                                content = part['choices'][0].get('delta', {}).get('content', '')
                                full_response += content
                                placeholder.markdown(full_response)

                        # Ajouter la r√©ponse compl√®te √† l'historique
                        st.session_state.chat_history.append({
                            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                            "user": question,
                            "bot": full_response
                        })
                        send_telegram_message(f"üì© R√©sultat IA :\n{full_response[:400]}...")
        except Exception as e:
            st.error(f"‚ùå Erreur lors du traitement : {e}")

    # Affichage de l'historique des √©changes
    if st.session_state.chat_history:
        st.markdown("### Historique des √©changes")
        history_df = pd.DataFrame(st.session_state.chat_history)
        st.dataframe(history_df)
        csv_history = history_df.to_csv(index=False).encode("utf-8")
        st.download_button("T√©l√©charger l'historique", data=csv_history, file_name="historique_chat.csv", mime="text/csv")
        for exchange in st.session_state.chat_history:
            st.markdown(f"**[{exchange['timestamp']}] Vous :** {exchange['user']}")
            st.markdown(f"**[{exchange['timestamp']}] IA :** {exchange['bot']}")



# ================= TAB 2 : Bot de Trading BTC/USDT =================
with tab2:
    st.title("üìà Bot de Trading BTC/USDT")
    st.markdown(
        """
        **Bienvenue dans le Bot de Trading BTC/USDT !**

        Ce module vous permet d'analyser le march√© du Bitcoin en temps r√©el gr√¢ce √† des indicateurs techniques avanc√©s.

        **Utilisation :**
        1. **P√©riode d'analyse :** S√©lectionnez la dur√©e (en jours) pour analyser l'historique OHLC (1, 7 ou 30 jours).
        2. **Param√®tres techniques :**
           - **Seuil RSI :** Ajustez le niveau critique du RSI (par d√©faut 50).
           - **D√©calage MACD :** D√©finissez un d√©calage pour ajuster la sensibilit√© du MACD.
        3. **Lancement de l'analyse :** Cliquez sur le bouton pour r√©cup√©rer les donn√©es, calculer les indicateurs (EMA, RSI, MACD, Bollinger Bands) et afficher des graphiques d√©taill√©s.
        4. **Notification :** En cas de signal BUY ou SELL ok, une notification est envoy√©e via Telegram.
        """
    )

    # S√©lection de la p√©riode d'analyse
    days = st.selectbox("S√©lectionnez la p√©riode d'analyse (en jours)", options=[1, 7, 30], index=0)

    st.markdown("#### Personnalisez vos param√®tres d'analyse")
    rsi_threshold = st.slider("Seuil RSI (d√©faut 50)", 30, 70, 50)
    macd_offset = st.number_input("D√©calage minimal MACD (d√©faut 0)", value=0.0, step=0.1)

    @st.cache_data
    def get_btc_price():
        """R√©cup√®re le prix actuel du BTC/USDT depuis CoinGecko."""
        url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            data = response.json()
            return data["bitcoin"]["usd"]
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la r√©cup√©ration du prix BTC/USDT: {e}")
            st.stop()

    @st.cache_data
    def get_btc_ohlc(days):
        """R√©cup√®re les donn√©es OHLC du BTC/USDT sur la p√©riode s√©lectionn√©e depuis CoinGecko."""
        url = f"https://api.coingecko.com/api/v3/coins/bitcoin/ohlc?vs_currency=usd&days={days}"
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            data = response.json()
            df = pd.DataFrame(data, columns=["timestamp", "open", "high", "low", "close"])
            df["time"] = pd.to_datetime(df["timestamp"], unit="ms")
            df.set_index("time", inplace=True)
            return df
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la r√©cup√©ration des donn√©es OHLC: {e}")
            st.stop()

    def calculate_indicators(df):
        """
        Calcule les indicateurs techniques suivants :
        - EMA50 et EMA200 pour suivre la tendance √† court et long terme.
        - RSI pour mesurer le momentum.
        - MACD et Signal MACD (avec d√©calage) pour d√©tecter les changements de tendance.
        - Bollinger Bands pour √©valuer la volatilit√©.
        """
        df["EMA50"] = df["close"].ewm(span=50).mean()
        df["EMA200"] = df["close"].ewm(span=200).mean()
        delta = df["close"].diff()
        gain = delta.where(delta > 0, 0).rolling(14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(14).mean()
        rs = gain / loss
        df["RSI"] = 100 - (100 / (1 + rs))
        df["MACD"] = df["close"].ewm(span=12).mean() - df["close"].ewm(span=26).mean()
        df["MACD_Signal"] = df["MACD"].ewm(span=9).mean() + macd_offset
        # Calcul des Bollinger Bands sur une moyenne mobile de 20 p√©riodes
        df["MA20"] = df["close"].rolling(window=20).mean()
        df["BB_upper"] = df["MA20"] + 2 * df["close"].rolling(window=20).std()
        df["BB_lower"] = df["MA20"] - 2 * df["close"].rolling(window=20).std()
        return df

    def analyse_trading(df):
        """
        Analyse les indicateurs pour g√©n√©rer un signal de trading :
        - BUY : tendance haussi√®re confirm√©e.
        - SELL : tendance baissi√®re confirm√©e.
        - NEUTRAL : aucun signal clair.
        """
        last = df.iloc[-1]
        if last["close"] > last["EMA50"] > last["EMA200"] and last["RSI"] > rsi_threshold and last["MACD"] > last["MACD_Signal"]:
            return "BUY", "Signal d'achat d√©tect√© : tendance haussi√®re confirm√©e par les indicateurs."
        elif last["close"] < last["EMA50"] < last["EMA200"] and last["RSI"] < rsi_threshold and last["MACD"] < last["MACD_Signal"]:
            return "SELL", "Signal de vente d√©tect√© : tendance baissi√®re confirm√©e par les indicateurs."
        else:
            return "NEUTRAL", "Aucun signal clair d√©tect√© actuellement."

    def plot_trading_chart(df):
        """
        Affiche deux graphiques :
        - Le premier montre le prix du BTC avec EMA50, EMA200 et Bollinger Bands.
        - Le second affiche les oscillateurs RSI et MACD.
        """
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8), sharex=True)
        # Graphique du prix et indicateurs de tendance
        ax1.plot(df.index, df["close"], label="Prix BTC", color="black")
        ax1.plot(df.index, df["EMA50"], label="EMA 50", color="blue")
        ax1.plot(df.index, df["EMA200"], label="EMA 200", color="red")
        ax1.plot(df.index, df["BB_upper"], label="Bollinger Upper", linestyle="--", color="green")
        ax1.plot(df.index, df["BB_lower"], label="Bollinger Lower", linestyle="--", color="green")
        ax1.fill_between(df.index, df["BB_lower"], df["BB_upper"], color="green", alpha=0.1)
        ax1.set_title("Cours BTC/USDT et indicateurs techniques")
        ax1.legend()
        # Graphique des oscillateurs
        ax2.plot(df.index, df["RSI"], label="RSI", color="purple")
        ax2.plot(df.index, df["MACD"], label="MACD", color="orange")
        ax2.plot(df.index, df["MACD_Signal"], label="Signal MACD", linestyle="--", color="gray")
        ax2.set_title("RSI et MACD")
        ax2.legend()
        st.pyplot(fig)

    # Affichage du prix actuel de BTC/USDT
    current_price = get_btc_price()
    st.metric("üí∞ Prix actuel BTC/USDT", f"${current_price:.2f}")

    # Lancement de l'analyse de trading
    if st.button("üöÄ Lancer l'analyse de trading"):
        df_btc = get_btc_ohlc(days)
        df_btc = calculate_indicators(df_btc)
        signal, comment = analyse_trading(df_btc)
        plot_trading_chart(df_btc)
        st.markdown("### R√©sultat de l'analyse de trading")
        st.write(f"**Signal d√©tect√© :** {signal}")
        st.write(f"**Commentaire :** {comment}")
        if signal != "NEUTRAL":
            send_telegram_message(f"üìà Signal Trading: {signal}\n{comment}")
            st.success(f"‚úÖ Signal envoy√© par Telegram : {signal}")
        else:
            send_telegram_message("üîç Aucun signal clair d√©tect√©.")
            st.info("Aucune opportunit√© d√©tect√©e pour le moment.")

    with st.expander("‚ÑπÔ∏è Explications sur les indicateurs utilis√©s"):
        st.markdown(
            """
            - **EMA 50 / EMA 200** : Moyennes mobiles qui indiquent la tendance √† court et long terme.
              - **EMA 50** : R√©active aux changements de prix r√©cents.
              - **EMA 200** : Indicateur de tendance √† long terme.
            - **RSI** : Mesure le momentum ; un RSI sup√©rieur √† 50 sugg√®re une tendance haussi√®re.
            - **MACD** : Diff√©rence entre deux moyennes mobiles exponentielles (12 et 26 p√©riodes).
              - **Signal MACD** : Moyenne mobile de la MACD sur 9 p√©riodes (ajust√©e par le d√©calage).
            - **Bollinger Bands** : Bas√©es sur une moyenne mobile sur 20 p√©riodes et ¬±2 √©carts-types pour mesurer la volatilit√©.
            """
        )

# ================= TAB 3 : Analyse de Portefeuille =================
# ================= TAB 3 : Analyse de Portefeuille =================
# ================= TAB 3 : Analyse de Portefeuille =================
with tab3:
    st.title("üìä Analyse de Portefeuille - Optimisez vos Investissements")
    st.markdown(
        """
        T√©l√©versez votre portefeuille au format CSV pour obtenir une analyse compl√®te :
        - R√©partition des actifs.
        - Valeur totale.
        - Indice de diversification.
        - Estimation de la volatilit√© globale.
        - Analyse des risques.
        - Recommandations d'investissement.
        - Comparaison avec un indice de r√©f√©rence.
        - Simulation de sc√©narios de march√©.
        """
    )
    uploaded_portfolio = st.file_uploader("T√©l√©versez votre portefeuille (CSV: Asset, Quantity, Price)", type=["csv"])

    if uploaded_portfolio is not None:
        try:
            portfolio_df = pd.read_csv(uploaded_portfolio)
            # V√©rifiez que les colonnes n√©cessaires sont pr√©sentes
            required_columns = {"Asset", "Quantity", "Price"}
            if not required_columns.issubset(portfolio_df.columns):
                st.error("Le fichier CSV doit contenir les colonnes : Asset, Quantity, Price.")
                st.stop()
        except Exception as e:
            st.error(f"Erreur lors de la lecture du fichier CSV : {e}")
            st.stop()
    else:
        # Portefeuille exemple si aucun fichier n'est fourni
        data = {'Asset': ['BTC', 'ETH', 'AAPL', 'GOOGL', 'AMZN'],
                'Quantity': [0.5, 2, 10, 5, 8],
                'Price': [60000, 4000, 150, 2800, 3500]}
        portfolio_df = pd.DataFrame(data)
        st.info("Utilisation d'un portefeuille exemple.")

    # Calcul de la valeur par actif et r√©partition
    portfolio_df["Value"] = portfolio_df["Quantity"] * portfolio_df["Price"]
    total_value = portfolio_df["Value"].sum()
    portfolio_df["Weight (%)"] = portfolio_df["Value"] / total_value * 100
    st.subheader("D√©tails du Portefeuille")
    st.dataframe(portfolio_df)
    st.metric("Valeur Totale", f"${total_value:,.2f}")

    # Calcul de l'indice de diversification (Indice de Herfindahl-Hirschman)
    portfolio_df["Weight_Fraction"] = portfolio_df["Weight (%)"] / 100
    herfindahl_index = (portfolio_df["Weight_Fraction"] ** 2).sum()
    diversification_index = 1 - herfindahl_index
    st.write(f"**Indice de Diversification :** {diversification_index:.2f} (0 = faible, 1 = forte diversification)")

    # Estimation de la volatilit√© du portefeuille
    volatility = portfolio_df["Value"].std()
    st.write(f"**Volatilit√© estim√©e du portefeuille :** {volatility:.2f}")

    # Analyse des risques
    st.subheader("Analyse des Risques")
    st.write("Analyse des risques bas√©e sur la volatilit√© historique des actifs.")
    # Note : Pour une analyse des risques compl√®te, des donn√©es historiques sont n√©cessaires.

    # Recommandations d'investissement
    st.subheader("Recommandations d'Investissement")
    st.write("Utilisez l'IA pour obtenir des recommandations personnalis√©es.")
    portfolio_question = st.text_area("Posez votre question sur votre portefeuille :", placeholder="Ex : Comment optimiser ma diversification et r√©duire le risque ?")
    if portfolio_question:
        portfolio_summary = portfolio_df.to_csv(index=False)
        if mode_test:
            fake_response = (
                "Analyse simul√©e : Votre portefeuille est globalement √©quilibr√©, mais vous pourriez augmenter l'exposition aux actions technologiques "
                "pour am√©liorer la performance √† long terme tout en surveillant le risque global."
            )
            st.success(fake_response)
            send_telegram_message(f"[TEST Portefeuille] {fake_response}")
        else:
            system_prompt = (
                "Tu es un expert en gestion de portefeuille et en finances personnelles. "
                "Analyse le portefeuille fourni et propose des recommandations pour optimiser la diversification, r√©duire le risque et am√©liorer la performance."
            )
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"Voici mon portefeuille au format CSV :\n{portfolio_summary}\n\nQuestion : {portfolio_question}"}
            ]
            try:
                with st.spinner("üí¨ L'IA analyse votre portefeuille..."):
                    response = client_openai.chat.completions.create(
                        model="gpt-4",
                        messages=messages,
                        stream=True,
                    )
                    portfolio_response = ""
                    placeholder_portfolio = st.empty()
                    for part in response:
                        if 'choices' in part and len(part['choices']) > 0:
                            content = part['choices'][0].get('delta', {}).get('content', '')
                            portfolio_response += content
                            placeholder_portfolio.markdown(portfolio_response)
                    send_telegram_message(f"üì© Analyse Portefeuille IA :\n{portfolio_response[:400]}...")
            except Exception as e:
                st.error(f"Erreur lors de l'appel √† l'API OpenAI : {e}")

    # Comparaison avec un indice de r√©f√©rence
    st.subheader("Comparaison avec un Indice de R√©f√©rence")
    st.write("Comparaison de la performance du portefeuille avec le S&P 500.")
    # Note : Pour une comparaison compl√®te, des donn√©es historiques sont n√©cessaires.

    # Simulation de sc√©narios de march√©
    st.subheader("Simulation de Sc√©narios de March√©")
    st.write("Simulez diff√©rents sc√©narios de march√© pour √©valuer l'impact sur votre portefeuille.")
    # Note : Pour une simulation compl√®te, des donn√©es historiques et des mod√®les de pr√©vision sont n√©cessaires.

    # Graphique circulaire de r√©partition des actifs
    st.subheader("R√©partition des Actifs")
    fig_port, ax_port = plt.subplots(figsize=(6, 6))
    ax_port.pie(portfolio_df["Value"], labels=portfolio_df["Asset"], autopct='%1.1f%%', startangle=90)
    ax_port.axis('equal')
    st.pyplot(fig_port)

    # Graphique √† barres des valeurs par actif
    st.subheader("Valeur par Actif")
    fig_bar, ax_bar = plt.subplots(figsize=(8, 4))
    ax_bar.bar(portfolio_df["Asset"], portfolio_df["Value"], color="skyblue")
    ax_bar.set_title("Valeur par Actif")
    ax_bar.set_ylabel("Valeur ($)")
    st.pyplot(fig_bar)

    # Option de t√©l√©chargement du rapport complet
    csv_report = portfolio_df.to_csv(index=False).encode('utf-8')
    st.download_button("T√©l√©charger le rapport CSV", data=csv_report, file_name="rapport_portefeuille.csv", mime="text/csv")


# ================= FIN DU CODE =================
